cmake_minimum_required(VERSION 2.8.12)

project(proto)

#message("Proto workdir: ${PROTO_WORKDIR}")
#message("Proto bindir: ${PROTO_BINDIR}")
#message("Proto sources: ${PROTO_SOURCES}")

# Find dependencies
find_program(GOLANG go DOC "Golang" REQUIRED)
find_program(PROTOC protoc DOC "Protobuf compiler" REQUIRED)

# Helper variables
set(CPPREFL_BIN "protoc-gen-cpprefl")
set(CPPREFL_DIR "cpp-reflection")
set(CPPREFL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${CPPREFL_DIR})
set(CPPREFL_OUTPUT ${PROTO_BINDIR}/${CPPREFL_BIN})

# Build protoc-gen-cpprefl
file(RELATIVE_PATH CPPREFL_OUTPUT_REL ${CPPREFL_PATH} ${CPPREFL_OUTPUT})
add_custom_command(
        OUTPUT ${CPPREFL_OUTPUT}
        COMMAND cd ${CPPREFL_PATH} && go build -o ${CPPREFL_OUTPUT_REL} .
)

# Clear SOURCES set by parent projects
set(SOURCES "")

# Sources to be CXX compiled
set(PROTO_IMPL "AnyRefImpl.cpp" "ReflectTypeInfo.cpp")
# Other files generated by protoc
set(PROTO_HEADERS "ReflectionInternal.h" "protobuf.h")

# Prepend output path to C++ files
foreach(FILE ${PROTO_IMPL})
    list(APPEND SOURCES ${PROTO_BINDIR}/protos/${FILE})
    list(APPEND PROTO_OUTPUTS ${PROTO_BINDIR}/protos/${FILE})
endforeach()

foreach(FILE ${PROTO_HEADERS})
    list(APPEND PROTO_OUTPUTS ${PROTO_BINDIR}/protos/${FILE})
endforeach()

# Change *.proto to *.h
foreach(FILE ${PROTO_SOURCES})
    get_filename_component(NAME ${FILE} NAME_WE)
    get_filename_component(PATH ${FILE} PATH)
    list(APPEND PROTO_OUTPUTS ${PROTO_BINDIR}/protos/${NAME}.h)
    file(RELATIVE_PATH PATH ${PROTO_BINDIR} ${PATH})
    file(RELATIVE_PATH FILE ${PROTO_BINDIR} ${FILE})
    # Skip duplicates in include path
    list(FIND PROTO_PATH_REL ${PATH} INDEX)
    if(${INDEX} EQUAL -1)
        list(APPEND PROTO_PATH_REL ${PATH})
    endif()
    # Convert .proto file path to relative
    list(APPEND PROTO_SOURCES_REL ${FILE})
endforeach()

#message("Proto all outputs: ${PROTO_OUTPUTS}")
#message("Proto sources relative: ${PROTO_SOURCES_REL}")
#message("Proto include path: ${PROTO_PATH_REL}")

# Compile .proto source files to CPP impl
make_directory(${PROTO_BINDIR}/protos)
add_custom_command(
        OUTPUT ${PROTO_OUTPUTS}
        COMMAND cd ${PROTO_BINDIR} && protoc --plugin=${CPPREFL_BIN} --cpprefl_out protos --proto_path ${PROTO_PATH_REL} ${PROTO_SOURCES_REL}
        DEPENDS ${PROTO_SOURCES} ${CPPREFL_OUTPUT}
)

add_library(proto STATIC ${SOURCES})
target_include_directories(proto PUBLIC ${PROTO_BINDIR}/protos)
